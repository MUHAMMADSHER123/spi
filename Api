from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import Optional, List
import uuid

app = FastAPI(
    title="Musiqa Boti API",
    description="Telegram yoki boshqa platformalar uchun musiqa boti backend API",
    version="1.0.0"
)

# Mock database
songs_db = []
users_db = []
playlists_db = []


# Modellar
class Song(BaseModel):
    id: str
    title: str
    artist: str
    duration: int  # sekundlarda
    file_id: str  # Telegram file_id yoki boshqa platforma identifikatori


class User(BaseModel):
    id: str
    username: str
    favorite_songs: List[str] = []  # Song ID lar ro'yxati


class Playlist(BaseModel):
    id: str
    name: str
    owner_id: str
    songs: List[str] = []  # Song ID lar ro'yxati


# Endpointlar

@app.post("/songs/", response_model=Song, tags=["Songs"])
async def add_song(title: str, artist: str, duration: int, file_id: str):
    """Yangi qo'shiq qo'shish"""
    song_id = str(uuid.uuid4())
    new_song = Song(
        id=song_id,
        title=title,
        artist=artist,
        duration=duration,
        file_id=file_id
    )
    songs_db.append(new_song)
    return new_song


@app.get("/songs/", response_model=List[Song], tags=["Songs"])
async def get_songs(
        search: Optional[str] = Query(None, description="Qo'shiq yoki artist nomi bo'yicha qidiruv")
):
    """Barcha qo'shiqlar ro'yxati yoki qidiruv natijalari"""
    if search:
        search = search.lower()
        results = [
            song for song in songs_db
            if search in song.title.lower() or search in song.artist.lower()
        ]
        return results
    return songs_db


@app.get("/songs/{song_id}", response_model=Song, tags=["Songs"])
async def get_song(song_id: str):
    """ID bo'yicha qo'shiqni olish"""
    for song in songs_db:
        if song.id == song_id:
            return song
    raise HTTPException(status_code=404, detail="Qo'shiq topilmadi")


@app.post("/users/", response_model=User, tags=["Users"])
async def register_user(username: str):
    """Yangi foydalanuvchi ro'yxatdan o'tkazish"""
    user_id = str(uuid.uuid4())
    new_user = User(id=user_id, username=username)
    users_db.append(new_user)
    return new_user


@app.post("/users/{user_id}/favorites/", tags=["Users"])
async def add_to_favorites(user_id: str, song_id: str):
    """Foydalanuvchining sevimlilariga qo'shiq qo'shish"""
    # Foydalanuvchi va qo'shiq mavjudligini tekshirish
    user = next((u for u in users_db if u.id == user_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="Foydalanuvchi topilmadi")

    song = next((s for s in songs_db if s.id == song_id), None)
    if not song:
        raise HTTPException(status_code=404, detail="Qo'shiq topilmadi")

    if song_id not in user.favorite_songs:
        user.favorite_songs.append(song_id)

    return {"message": "Qo'shiq sevimlilarga qo'shildi"}


@app.post("/playlists/", response_model=Playlist, tags=["Playlists"])
async def create_playlist(name: str, owner_id: str):
    """Yangi playlist yaratish"""
    # Foydalanuvchi mavjudligini tekshirish
    user = next((u for u in users_db if u.id == owner_id), None)
    if not user:
        raise HTTPException(status_code=404, detail="Foydalanuvchi topilmadi")

    playlist_id = str(uuid.uuid4())
    new_playlist = Playlist(
        id=playlist_id,
        name=name,
        owner_id=owner_id
    )
    playlists_db.append(new_playlist)
    return new_playlist


@app.post("/playlists/{playlist_id}/songs/", tags=["Playlists"])
async def add_song_to_playlist(playlist_id: str, song_id: str):
    """Playlistga qo'shiq qo'shish"""
    playlist = next((p for p in playlists_db if p.id == playlist_id), None)
    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist topilmadi")

    song = next((s for s in songs_db if s.id == song_id), None)
    if not song:
        raise HTTPException(status_code=404, detail="Qo'shiq topilmadi")

    if song_id not in playlist.songs:
        playlist.songs.append(song_id)

    return {"message": "Qo'shiq playlistga qo'shildi"}


@app.get("/playlists/{playlist_id}", response_model=Playlist, tags=["Playlists"])
async def get_playlist(playlist_id: str):
    """Playlist ma'lumotlarini olish"""
    playlist = next((p for p in playlists_db if p.id == playlist_id), None)
    if not playlist:
        raise HTTPException(status_code=404, detail="Playlist topilmadi")
    return playlist


# Asosiy endpoint
@app.get("/", tags=["Root"])
async def root():
    return {"message": "Musiqa Boti API ga xush kelibsiz!"}
